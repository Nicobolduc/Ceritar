<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAABgAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAA
        AAUAAAAGAAAABgAAAAUAAAAFAAAABQAAAAQAAAAEAAAABAAAAAMAAAADAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoAAAAADzo6OklNTU1kTU1NY01NTWNNTU1jTU1NY0xM
        TGNMTExjTExMZExMTGRMTExkTU1NY05OTmFPT09gUFBQX1FRUV1SUlJcVFRUW1ZWVlk+Pj5FAAAAEAoK
        CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIGBgZCn5+fy+3t7fXq6urz6urq8+rq
        6vPq6urz6urq8+rq6vPq6urz6urq8+rq6vPq6urz6+vr8+rq6vPr6+vy7Ozs8uzs7PLt7e3y7+/v86Cg
        oMoGBgZBAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRoaGm+Xl5f3//////n5
        +f/5+fn/+vr6//j4+P/6+vr/+vr6//n5+f/7+/v/+fn5//n5+f/6+vr/+vr6//r6+v/9/f3//f39//39
        /f//////l5eX9xoaGm8AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHKCgodo2N
        jfn6+vr/9vb2//b29v/29vb/9vb2//b29v/29vb/9fX1//b29v/39/f/9vb2//j4+P/39/f/9vb2//j4
        +P/39/f/+fn5//v7+/+NjY35KCgodgAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAZBQUFyiYmJ+fPy8v/x8PD/7+/v//Hw8P/y8fH/8/Ly//Pz8//y8fH/8vHx//Ly8v/y8vL/9fT0//Ly
        8v/x8fH/8vLy//Lx8f/z8/P/8/Pz/4mJiflDQ0NvAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAEwAA
        ABoAAAAYAAAAHjs7O395eXn54uHh/+vq6v/o5+f/6efn/+no6P/p6Oj/6efn/+ro6P/q6en/6ejo/+no
        6P/r6en/6unp/+rp6f/q6en/6ujo/+vq6v/i4eH/eXl5+Ts7O4EAAAAhAAAAFgAAABkAAAATAAAABQkJ
        CSRcXFyKbm5uq29vb6dra2uqbW1tzG5tbfvBvr7/y8fH/8nFxf/Kxsb/ycXF/8nFxf/Kxsb/ycXF/8nF
        xf/MyMj/ycXF/8nFxf/Lx8f/z8vL/8/Ly//Py8v/0MzM/8G+vv9ubW37a2trz2pqaqxwcHClb29vqVtb
        W4oICAgnEhISOZSUlNa2trb/tLS0/7W1tf+pqan/XFtb/4Z/f/+RiYn/j4iI/4+Hh/+Ph4f/kIiI/5GJ
        if+Ph4f/j4eH/5GJif+QiIj/jYaG/4+Hh/+QiYn/kYmJ/5CJif+Ti4v/hn9//1xbW/+pqan/tbW1/7S0
        tP+2trb/lJSU1xISEjspKSk7qKio28XFxf/ExMT/xsbG/6ampv8yMjL/Liws/zIvL/8yLy//Mi8v/zEv
        L/8yLy//Mi8v/zIvL/8yLy//Mi8v/zIvL/8xLy//Mi8v/zIvL/8yLy//Mi8v/zIvL/8uLCz/MjIy/6am
        pv/Gxsb/xsfH/8XGxv+oqKjbKysrO0lJSTe3t7ffzc3N/8zMzP/Ozs7/sLCw/yQkJP8LCwv/DAwM/wwM
        DP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wwMDP8MDAz/DAwM/wsL
        C/8kJCT/sLCw/8zMzP/Ly8v/y8vL/7e3t+BHR0c5cnJyLcfHx97V1dX/1NTU/9XV1f/S0tL/j4+P/2pq
        av9qamr/ampq/2lpaf9oaGj/Z2dn/2dnZ/9mZmb/ZWVl/2VlZf9mZmb/ZmZm/2dnZ/9oaGj/aGho/2lp
        af9qamr/aWlp/4+Pj//S0tL/09PT/87Ozv/R0dH/yMjI3nV1dSyvr68h1NTU3Nzc3P/c3Nz/3Nzc/9zc
        3P/c3Nz/29vb/9vb2//b29v/29vb/9vb2//b29v/2tra/9ra2v/a2tr/2tra/9ra2v/a2tr/2tra/9ra
        2v/b29v/29vb/9vb2//b29v/3Nzc/9zc3P/a2tr/0tLS/9fX1//V1dXcs7OzIbKysh/FxcXby8vL/8zM
        zP/Nzc3/z8/P/8LCwv+cnJz/m5ub/5ycnP+dnZ3/np6e/5mZmf+RkZH/l5eX/5ycnP+cnJz/mJiY/5KS
        kv+bm5v/oKCg/5+fn/+enp7/nZ2d/5+fn//FxcX/0tLS/9DQ0P/Pz8//z8/P/8jIyNy1tbUgwMDAHdfX
        19fd3d3/3d3d/97e3v/g4OD/u7u7/0lJSf8/Pz//Pz8//0BAQP9AQED/PDw8/zc3N/9DQ0P/SEhI/0hI
        SP9ERET/ODg4/zw8PP9AQED/QEBA/0BAQP8/Pz//SkpK/7y8vP/g4OD/3t7e/97e3v/e3t7/2NjY2MDA
        wB3IyMgY4eHh0Ojo6P/o6Oj/6Ojo/+rq6v/IyMj/WVlZ/05OTv9PT0//T09P/05OTv9PT0//WVlZ/15e
        Xv9fX1//X19f/15eXv9ZWVn/T09P/05OTv9PT0//T09P/05OTv9ZWVn/yMjI/+rq6v/o6Oj/6Ojo/+jo
        6P/h4eHRyMjIGMvLyxDl5eXF7u7u/+3t7f/t7e3/7+/v/8/Pz/9gYGD/U1NT/1RUVP9UVFT/VFRU/1RU
        VP9TU1P/U1NT/1NTU/9TU1P/U1NT/1NTU/9UVFT/VFRU/1RUVP9UVFT/U1NT/2BgYP/Pz8//7+/v/+3t
        7f/t7e3/7u7u/+Xl5cXLy8sRwcHBCOfn57jw8PD/8PDw//Dw8P/x8fH/1tbW/3Jycv9mZmb/Z2dn/2dn
        Z/9nZ2f/Z2dn/2dnZ/9oaGj/aGho/2hoaP9oaGj/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9mZmb/cnJy/9bW
        1v/x8fH/8PDw//Dw8P/w8PD/5+fnuMLCwgiurq4DycnJodPT0/ra2tr23Nzc9t/f3/bOzs74rKys/qys
        rP6rq6v+qqqq/qmpqf6oqKj+qKio/qenp/6mpqb+pqam/qenp/6oqKj+qKio/qmpqf6qqqr+q6ur/qys
        rP6srKz+zs7O+ODg4Pbd3d3229vb9tXV1frMzMyhra2tA6GhoQCZmZl1p6en/7m5uf6/v7/+xMTE/bCw
        sP5nZ2f/ZWRk/2ZmZv9lZWX/ZGRk/2NjY/9iYmL/YWFh/2BfX/9gX1//YWFh/2JiYv9kY2P/ZWRk/2Zl
        Zf9nZmb/ZWRk/2dnZ/+wsLD+xcXF/cDAwP67u7v+ra2t/56ennWnp6cAlpaWAJWVlUOgoKD1s7Oz/729
        vf/CwsL/s7Oz/3Z1df+cl5f/r6qq/7Ovr/+4tLT/u7e3/766uv/AvLz/wb6+/8G+vv/Avb3/vru7/7y4
        uP+5tbX/tbCw/7GsrP+dmZn/d3Z2/7S0tP/Dw8P/v7+//7e3t/+lpaX1mpqaQ5ubmwCQkJAAj4+PG5mZ
        mcOrq6vjurq64cDAwOG5ubnnioqK/bWwsP/Lxsb/0MvL/9XR0f/Z1dX/3NnZ/97b2//f3Nz/39zc/97b
        2//c2dn/2tbW/9bS0v/Rzc3/zMjI/7aysv+Mi4v9urq658HBweG8vLzhr6+v456ensOUlJQblZWVAIuL
        iwCIiIgClJSUGKWlpR63t7cevr6+G7y9vUiVlJTuwL29/9bS0v/b2Nj/4N3d/+Th4f/m5OT/6Obm/+nn
        5//p5+f/6Obm/+fk5P/k4uL/4d7e/9zZ2f/Y1NT/wr6+/5aVle6/v79Iv7+/G7q6uh6qqqoemZmZGI6O
        jgKRkZEAAAAAAAAAAAAAAAAAAAAAAAAAAAC3t7cAs7OzL5qamuvMycn/4d7e/+bj4//q6Oj/7uzs//Hv
        7//y8fH/8/Ly//Py8v/z8fH/8fDw/+/t7f/r6en/5+Tk/+Pg4P/Ny8v/m5ub67W1tS+5ubkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK6urgCqqqowmZmZ69TS0v/q6Oj/7+3t//Py
        8v/39vb/+fj4//r6+v/7+/v/+/v7//v6+v/5+fn/9/f3//Tz8//w7+//7Orq/9bU1P+amprrq6urMK+v
        rwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo6OjAJ+fnyScm5vO3tzc/fPx
        8f/39vb/+vr6//39/f/+/v7///////////////////////7+/v/9/f3/+/v7//j39//08/P/397e/Zyc
        nM6goKAko6OjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACTk5MAAAAAAaSj
        oz7s6+vr+fj4//38/P///////////////////////////////////////////////////////f39//r6
        +v/t7OzrpaSkPgAEBAGTk5MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADBwMAAr66uKvLy8uj+/f3/////////////////////////////////////////////////////////
        /////////v7+//Tz8+iwr68qwsLCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMTExACwr68r9vb26P//////////////////////////////////////////////////
        ////////////////////////9/f36LCwsCvFxcUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAvr6+AKqqqijw8PDT+Pj46fj4+Oj4+Pjo+Pj46Pj4+Oj4+Pjo+Pj46Pj4
        +Oj4+Pjo+Pj46Pj4+Oj4+Pjo+Pj46Pj4+Onw8PDTqqqqKL6+vgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eHgAZ2dnCampqSiysrIrsrKyK7KysiuysrIrsrKyK7Ky
        siuysrIrsrKyK7KysiuysrIrsrKyK7KysiuysrIrsrKyK6mpqShnZ2cJeHh4AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/AAAP/gAAB/wAAAP8AAAD/AAAA/wAAAPAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABgAAAAYAAAAH8AAA//AAAP/wA
        AD/8AAA//gAAf/4AAH/+AAB//gAAf/////8=
</value>
  </data>
</root>